@model CMS.Web.ViewModels.MenuViewModel

@{
    ViewBag.Title = Model?.Id > 0 ? Resource.Edit : Resource.Add;
}

@section breadcrumb{
    <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">@Resource.Home</a></li>
    <li class="breadcrumb-item"><a href="@Url.Action("Index","Menu")">@Resource.Menus</a></li>
}
<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.NameEn, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.NameEn, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.NameEn, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ParentId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ParentId", null, $"-- {Resource.MainMenu} --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control", @Id = "UrlInput", @list = "Url" } })
                    <datalist id="Url">
                        <option value=""></option>

                        @foreach (var item in ViewBag.Urls as SelectList)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </datalist>
                    @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">

                <div class="col-md-10 px-5">
                    <div class="custom-control custom-checkbox">
                        @Html.CheckBoxFor(x => x.IsExtended, new { @class = "custom-control-input" })
                        @Html.LabelFor(model => model.IsExtended, htmlAttributes: new { @class = "custom-control-label" })
                        @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="container">
                <div class="text-right">
                    <input name="save" type="submit" value="@Resource.Save" class="btn btn-primary btn-lg" />
                    <a class="btn btn-danger btn-lg" href="@Url.Action("Delete","Menu",new { Id=Model?.Id})">@Resource.Delete</a>
                    @Html.ActionLink(Resource.Back, "Index", null, null, new { @class = "btn btn-light btn-lg" })
                </div>
            </div>
        </div>
    }

</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
